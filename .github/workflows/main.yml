name: BilyabitsRDP (v10.3)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"  # every 6 hours (UTC)

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 1440  # 24 hours max runtime

    env:
      TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
      RESTART_TOKEN: ${{ secrets.RESTART_TOKEN }}
      USERNAME: bilyabits
      PASSWORD: Cj123
      VERSION: "v10.3"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Configure RDP and firewall
        shell: pwsh
        run: |
          Write-Host "Enable RDP and firewall."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
            -Name fDenyTSConnections -Value 0 -Force
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

      - name: Create RDP user if missing
        shell: pwsh
        run: |
          $user = $env:USERNAME
          $pass = $env:PASSWORD
          if (-not (Get-LocalUser -Name $user -ErrorAction SilentlyContinue)) {
            net user $user $pass /add
          }
          Add-LocalGroupMember -Group "Administrators" -Member $user -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $user -ErrorAction SilentlyContinue
          echo "RDP_CREDS=User: $user | Password: $pass" >> $env:GITHUB_ENV

      - name: Install Tailscale (if missing)
        shell: pwsh
        run: |
          $exe = "C:\Program Files\Tailscale\tailscale.exe"
          if (-not (Test-Path $exe)) {
            Write-Host "Installing Tailscale..."
            Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe" -OutFile "tailscale-setup.exe"
            Start-Process -FilePath ".\tailscale-setup.exe" -ArgumentList "/quiet" -Wait
            Remove-Item .\tailscale-setup.exe -Force -ErrorAction SilentlyContinue
          } else {
            Write-Host "Tailscale already installed."
          }

      - name: Start Tailscale service safely
        shell: pwsh
        continue-on-error: true
        run: |
          Write-Host "Starting Tailscale service..."
          $svc = Get-Service | Where-Object { $_.Name -like "Tailscale*" }
          if ($null -ne $svc) {
            if ($svc.Status -ne "Running") {
              Start-Service $svc.Name
              Write-Host "Service $($svc.Name) started successfully."
            } else {
              Write-Host "Service $($svc.Name) already running."
            }
          } else {
            Write-Host "No Tailscale service found. Skipping start."
          }

      - name: Restore previous Tailscale state (ignore on first run)
        shell: pwsh
        continue-on-error: true
        run: |
          Write-Host "Restoring previous Tailscale state if available..."
          $statePath = "$env:USERPROFILE\AppData\Local\Tailscale\tailscaled.state"
          if (Test-Path $statePath) {
            Write-Host "Tailscale state found and loaded."
          } else {
            Write-Host "No previous Tailscale state found. Skipping restore."
          }

      - name: Connect Tailscale
        shell: pwsh
        run: |
          Write-Host "Connecting to Tailscale..."
          & "C:\Program Files\Tailscale\tailscale.exe" up --authkey $env:TAILSCALE_AUTH_KEY --hostname "WinRDP-${{ env.VERSION }}" --accept-routes --unattended
          $ip = (& "C:\Program Files\Tailscale\tailscale.exe" ip -4)[0]
          echo "TAILSCALE_IP=$ip" >> $env:GITHUB_ENV
          Write-Host "Connected with IP: $ip"

      - name: Log RDP credentials with IP
        shell: pwsh
        run: |
          $user = $env:USERNAME
          $pass = $env:PASSWORD
          $ip = $env:TAILSCALE_IP
          $ver = $env:VERSION
          $log = @"
          ====== RDP SESSION LOG ======
          Version: $ver
          Tailscale IP: $ip
          Username: $user
          Password: $pass
          Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
          =============================
          "@
          $log | Out-File -FilePath "RDP_LOG_${ver}.txt"
          Write-Host $log

      - name: Auto restart workflow
        shell: pwsh
        run: |
          Write-Host "Triggering auto restart..."
          gh workflow run "BilyabitsRDP (v10.3)" --ref main
          Write-Host "Restart triggered successfully."
