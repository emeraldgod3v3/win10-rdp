name: BilyabitsRDP (Version 2.0.6)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"  # auto restart every 6 hours

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Configure RDP and Firewall
        shell: pwsh
        run: |
          Write-Host "Enabling RDP and configuring firewall..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Write-Host "RDP Enabled successfully."

      - name: Create RDP User Account
        shell: pwsh
        run: |
          Write-Host "Creating default user: bilyabits"
          net user bilyabits Cj123 /add
          net localgroup administrators bilyabits /add
          Write-Host "User bilyabits added to administrators."

      - name: Install Tailscale
        shell: pwsh
        run: |
          Write-Host "Installing Tailscale..."
          Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe" -OutFile "tailscale-setup.exe"
          Start-Process -FilePath ".\tailscale-setup.exe" -ArgumentList "/quiet" -Wait
          Write-Host "Tailscale installed successfully."

      - name: Restore Tailscale State (if available)
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.SECRET_TOKEN }}
        run: |
          Write-Host "Restoring previous Tailscale state if exists..."
          try {
            Stop-Service Tailscale -ErrorAction SilentlyContinue
            if (Test-Path "C:\ProgramData\Tailscale") {
              Remove-Item "C:\ProgramData\Tailscale" -Recurse -Force
            }
            gh run download --name "tailscale-state" --dir "C:\ProgramData\Tailscale" 2>$null
            Write-Host "Tailscale state restored successfully."
          } catch {
            Write-Host "No previous Tailscale state found or unable to download. Continuing..."
          }

      - name: Start Tailscale Service and Authenticate
        shell: pwsh
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          Write-Host "Starting Tailscale..."
          Start-Service Tailscale

          # Force non-interactive auth and correct timeout duration (60s)
          & "C:\Program Files\Tailscale\tailscale.exe" up `
            --authkey $env:TAILSCALE_AUTH_KEY `
            --hostname "bilyabits-runner" `
            --accept-routes `
            --accept-dns=true `
            --ssh=true `
            --force-reauth `
            --timeout 60s `
            --unattended

          if ($LASTEXITCODE -ne 0) {
            Write-Host "Tailscale failed to authenticate non-interactively. Exiting with error."
            exit 1
          }

          $ip = & "C:\Program Files\Tailscale\tailscale.exe" ip -4
          Write-Host "Tailscale IP Address: $ip"

          $log = @"
          ===== RDP SESSION LOG =====
          Version: 2.0.6
          Username: bilyabits
          Password: Cj123
          IP Address: $ip
          Timestamp: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
          ============================
          "@
          $log | Out-File -FilePath "rdp-credentials.txt"
          Write-Host $log

      - name: Upload RDP Credentials Log
        uses: actions/upload-artifact@v4
        with:
          name: rdp-credentials
          path: rdp-credentials.txt

      - name: Save Tailscale State
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.SECRET_TOKEN }}
        run: |
          Write-Host "Saving Tailscale state..."
          Stop-Service Tailscale
          Compress-Archive -Path "C:\ProgramData\Tailscale" -DestinationPath "tailscale-state.zip" -Force
          gh run upload-artifact --name "tailscale-state" --path "tailscale-state.zip"
          Start-Service Tailscale
          Write-Host "Tailscale state saved and service restarted."

      - name: Auto Restart Workflow
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.SECRET_TOKEN }}
        run: |
          Write-Host "Triggering auto restart..."
          gh workflow run "BilyabitsRDP (Version 2.0.6)" --ref main
          Write-Host "Workflow restart triggered successfully."
