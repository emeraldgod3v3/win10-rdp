name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP User
        run: |
          $u = "carljohnvillavito"
          $p = "Cj123"
          $sp = ConvertTo-SecureString $p -AsPlainText -Force
          if (-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $u -Password $sp -AccountNeverExpires
          }
          Add-LocalGroupMember -Group "Administrators" -Member $u -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u -ErrorAction SilentlyContinue

      - name: Install Tailscale
        run: |
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $f = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $f
          Start-Process msiexec.exe -ArgumentList "/i", "`"$f`"", "/quiet", "/norestart" -Wait
          Remove-Item $f -Force

      - name: Download previous Tailscale state
        if: ${{ github.run_number > 1 }}
        uses: actions/download-artifact@v4
        with:
         name: tailscale-state
         path: C:\TailscaleState
         continue-on-error: true

      - name: Connect Tailscale
        run: |
          $stateFile = "C:\ProgramData\Tailscale\tailscaled.state"
          if (-not (Test-Path $stateFile)) {
            Write-Host "No previous state found, starting fresh."
            & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=carljohn-rdp --accept-dns=false
          } else {
            Write-Host "Reusing previous Tailscale state."
            & "$env:ProgramFiles\Tailscale\tailscale.exe" up --state=$stateFile --accept-dns=false
          }

          $tsIP = $null
          $tries = 0
          while (-not $tsIP -and $tries -lt 10) {
            $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
            Start-Sleep -Seconds 5
            $tries++
          }
          if (-not $tsIP) { Write-Error "No Tailscale IP"; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP
        run: |
          $ok = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $ok.TcpTestSucceeded) { exit 1 }
          Write-Host "RDP reachable at $env:TAILSCALE_IP"

      - name: Save State for Next Run
        run: |
          mkdir C:\temp -ErrorAction SilentlyContinue
          Copy-Item "C:\ProgramData\Tailscale\tailscaled.state" "C:\temp\tailscaled.state" -Force
        continue-on-error: true

      - name: Upload State Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tailscale-state
          path: C:\temp\tailscaled.state

      - name: Maintain and Auto-Restart
        run: |
          Write-Host "`nAddress: $env:TAILSCALE_IP"
          Write-Host "Username: carljohnvillavito"
          Write-Host "Password: Cj123`n"

          $start = Get-Date
          $limit = (New-TimeSpan -Hours 5 -Minutes 50)

          while ($true) {
            if ((Get-Date) - $start -ge $limit) {
              Write-Host "Restarting before timeout..."
              $headers = @{
                Authorization = "Bearer $env:RESTART_TOKEN"
                Accept = "application/vnd.github+json"
              }
              $body = @{ ref = "${{ github.ref }}" } | ConvertTo-Json
              Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ github.workflow }}/dispatches" -Method Post -Headers $headers -Body $body
              break
            }
            Write-Host "[$(Get-Date)] Active - next restart in $(($limit - ((Get-Date)-$start)).ToString())"
            Start-Sleep -Seconds 300
          }
