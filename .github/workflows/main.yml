name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 1440  # 24 hours

    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP User
        run: |
          $username = "carljohnvillavito"
          $password = "Cj123"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          if (-not (Get-LocalUser -Name $username -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $username -Password $securePass -AccountNeverExpires
            Add-LocalGroupMember -Group "Administrators" -Member $username
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
          }
          echo "RDP_CREDS=User: $username | Password: $password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      # --- Fix: skip download on first run ---
      - name: Check for previous run ID
        id: check_run
        run: |
          if ($env:GITHUB_RUN_NUMBER -gt 1) {
            echo "has_previous=true" >> $env:GITHUB_ENV
          } else {
            echo "has_previous=false" >> $env:GITHUB_ENV
          }

      - name: Download previous Tailscale state
        if: env.has_previous == 'true'
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: tailscale-state
          path: C:\ProgramData\Tailscale
      # ---------------------------------------

      - name: Establish Tailscale Connection
        run: |
          $stateDir = "C:\ProgramData\Tailscale"
          if (-not (Test-Path $stateDir)) { New-Item -ItemType Directory -Path $stateDir | Out-Null }

          & "$env:ProgramFiles\Tailscale\tailscale.exe" up `
            --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} `
            --state="$stateDir\tailscale.state" `
            --hostname=gh-runner-$env:GITHUB_RUN_ID

          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
            $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
            Start-Sleep -Seconds 5
            $retries++
          }

          if (-not $tsIP) {
            Write-Error "Tailscale IP not assigned. Exiting."
            exit 1
          }

          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
            Write-Error "TCP connection to RDP port 3389 failed"
            exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain and Auto-Restart Before 6 Hours
        run: |
          $start = Get-Date
          while ($true) {
            $elapsed = (Get-Date) - $start
            if ($elapsed.TotalHours -ge 5.9) {
              Write-Host "Restarting workflow before 6-hour limit..."
              & "$env:ProgramFiles\Tailscale\tailscale.exe" logout
              Compress-Archive -Path "C:\ProgramData\Tailscale" -DestinationPath "C:\tailscale-state.zip" -Force
              break
            }
            Write-Host "[$(Get-Date)] RDP Active - uptime: $($elapsed.ToString())"
            Start-Sleep -Seconds 300
          }

      - name: Upload Tailscale state before restart
        uses: actions/upload-artifact@v4
        with:
          name: tailscale-state
          path: C:\tailscale-state.zip

      - name: Restart Workflow
        env:
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          RESTART_TOKEN: ${{ secrets.RESTART_TOKEN }}
        run: |
          if (-not $env:RESTART_TOKEN) {
            Write-Host "No restart token found. Skipping restart."
            exit 0
          }

          $headers = @{
            Authorization = "Bearer $env:RESTART_TOKEN"
            Accept = "application/vnd.github+json"
          }
          $body = @{
            ref = "${{ github.ref_name }}"
          } | ConvertTo-Json
          $url = "https://api.github.com/repos/$env:REPO/actions/workflows/rdp.yml/dispatches"
          Invoke-RestMethod -Uri $url -Headers $headers -Body $body -Method Post
          Write-Host "Triggered new workflow run successfully."
