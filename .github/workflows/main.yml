name: BilyabitsRDP (Version 1.0.8)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"  # backup trigger every 6 hours

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360  # 6 hours max runtime

    env:
      USERNAME: bilyabits
      PASSWORD: bilyabits
      TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
      REPO: emeraldgod3v3/win10-rdp

    steps:
      - name: Configure RDP
        run: |
          Write-Host "Enabling RDP access..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Allow" > $null 2>&1
          netsh advfirewall firewall add rule name="RDP-Allow" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create User
        run: |
          $user = $env:USERNAME
          $pass = ConvertTo-SecureString $env:PASSWORD -AsPlainText -Force
          if (-not (Get-LocalUser -Name $user -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $user -Password $pass -AccountNeverExpires
            Add-LocalGroupMember -Group "Administrators" -Member $user
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $user
          }
          echo "RDP_CREDS=User: $user | Password: $env:PASSWORD" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $tsPath = "$env:ProgramFiles\Tailscale\tailscale.exe"
          if (-not (Test-Path $tsPath)) {
            Write-Host "Installing Tailscale..."
            $url = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
            $out = "$env:TEMP\tailscale.msi"
            Invoke-WebRequest -Uri $url -OutFile $out
            Start-Process msiexec.exe -ArgumentList "/i `"$out`" /quiet /norestart" -Wait
            Remove-Item $out -Force
          }

      - name: Restore Tailscale state (if exists)
        continue-on-error: true
        run: |
          Write-Host "Checking for previous Tailscale state..."
          $stateDir = "C:\ProgramData\Tailscale"
          New-Item -ItemType Directory -Force -Path $stateDir | Out-Null
          try {
            gh run download --name tailscale-state --dir $stateDir --repo $env:REPO
            Write-Host "Previous Tailscale state restored."
          } catch {
            Write-Host "No previous Tailscale state found. This is likely the first run."
          }

      - name: Start Tailscale
        run: |
          $ErrorActionPreference = "Stop"
          $tsExe = "C:\Program Files\Tailscale\tailscale.exe"
          $statePath = "C:\ProgramData\Tailscale\tailscaled.state"

          if (Test-Path $statePath) {
            Write-Host "Restored state found. Reconnecting..."
            & $tsExe up --unattended --accept-dns=false
          } else {
            Write-Host "No state found. Logging in using persistent auth key..."
            & $tsExe up --auth-key=$env:TAILSCALE_AUTH_KEY --unattended --accept-dns=false
          }

          Start-Sleep -Seconds 10
          $tsip = & $tsExe ip -4
          if (-not $tsip) {
            Write-Error "Tailscale IP not assigned. Exiting."
            exit 1
          }

          echo "TAILSCALE_IP=$tsip" >> $env:GITHUB_ENV
          Write-Host "Tailscale IP: $tsip"

      - name: Verify RDP access
        run: |
          $ip = $env:TAILSCALE_IP
          Write-Host "Testing RDP port 3389 on $ip..."
          $result = Test-NetConnection -ComputerName $ip -Port 3389
          if (-not $result.TcpTestSucceeded) {
            Write-Error "RDP port not accessible."
            exit 1
          }
          Write-Host "RDP port is accessible!"

      - name: Maintain RDP Session and Auto-Restart
        run: |
          $startTime = Get-Date
          while ($true) {
            $elapsed = (Get-Date) - $startTime
            Write-Host "[$(Get-Date)] RDP active. Elapsed: $([int]$elapsed.TotalMinutes) minutes"

            if ($elapsed.TotalHours -ge 5.9) {
              Write-Host "Restart trigger reached (5.9h). Saving Tailscale state and restarting..."
              Stop-Service Tailscale -Force
              Start-Sleep -Seconds 5
              Compress-Archive -Path "C:\ProgramData\Tailscale" -DestinationPath "C:\tailscale_state.zip" -Force
              gh run upload-artifact --name tailscale-state --repo $env:REPO --path "C:\tailscale_state.zip"
              gh workflow run main.yml --repo $env:REPO --ref main
              exit 0
            }

            Start-Sleep -Seconds 300
          }

      - name: Show RDP Connection Info
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          Write-Host "Username: $env:USERNAME"
          Write-Host "Password: $env:PASSWORD"
          Write-Host "==================`n"

      - name: Save Tailscale State
        if: always()
        run: |
          Write-Host "Preparing to save Tailscale state..."
          try {
            Stop-Service Tailscale -Force
            Start-Sleep -Seconds 5
            Compress-Archive -Path "C:\ProgramData\Tailscale" -DestinationPath "C:\tailscale_state.zip" -Force
            gh run upload-artifact --name tailscale-state --repo $env:REPO --path "C:\tailscale_state.zip"
            Write-Host "Tailscale state saved successfully."
          } catch {
            Write-Host "Failed to save Tailscale state. Continuing..."
          } finally {
            Start-Service Tailscale
          }
