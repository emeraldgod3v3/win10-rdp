name: RDP
on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
    - name: Setup default credentials
      run: |
        $username = "carljohnvillavito"
        $password = "Cj123"
        Write-Host "Creating local user: $username"
        net user $username $password /add
        net localgroup administrators $username /add
        Write-Host "User $username added to administrators."
        Write-Host "Username: $username"
        Write-Host "Password: $password"

    - name: Enable RDP and firewall
      run: |
        Write-Host "Configuring Remote Desktop..."
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Write-Host "RDP access enabled successfully."

    - name: Download previous Tailscale state (if exists)
      id: download_state
      continue-on-error: true
      run: |
        Write-Host "Checking for previous Tailscale state..."
        try {
          & gh run download --name tailscale-state --dir "C:\ProgramData\Tailscale"
          Write-Host "Previous Tailscale state restored."
        } catch {
          Write-Host "No previous state found, skipping restore."
        }

    - name: Install Tailscale
      run: |
        Write-Host "Installing Tailscale..."
        Invoke-WebRequest -Uri https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe -OutFile tailscale-setup.exe
        Start-Process .\tailscale-setup.exe -ArgumentList "/quiet" -Wait
        Write-Host "Tailscale installation complete."

    - name: Start Tailscale and authenticate
      env:
        TS_AUTHKEY: ${{ secrets.TS_AUTHKEY }}
      run: |
        $ErrorActionPreference = "Stop"
        Write-Host "Starting Tailscale..."
        & "C:\Program Files\Tailscale\tailscale.exe" up --auth-key $env:TS_AUTHKEY --accept-routes --accept-dns=false --unattended --reset
        Start-Sleep -Seconds 10
        $tsip = & "C:\Program Files\Tailscale\tailscale.exe" ip -4
        if (-not $tsip) {
          Write-Error "Tailscale IP not assigned. Exiting."
          exit 1
        }
        Write-Host "Tailscale IP Address: $tsip"

    - name: Verify RDP service
      run: |
        Write-Host "Checking RDP service status..."
        $status = Get-Service -Name TermService
        if ($status.Status -ne "Running") {
          Write-Host "RDP service not running. Starting now..."
          Start-Service TermService
        }
        Get-Service TermService

    - name: Print connection info
      run: |
        $tsip = & "C:\Program Files\Tailscale\tailscale.exe" ip -4
        Write-Host "===================="
        Write-Host "âœ… RDP is ready"
        Write-Host "IP Address: $tsip"
        Write-Host "Username: carljohnvillavito"
        Write-Host "Password: Cj123"
        Write-Host "===================="

    - name: Upload Tailscale state for restart
      if: always()
      run: |
        Write-Host "Preparing to save Tailscale state..."
        $statePath = "C:\ProgramData\Tailscale"
        $archivePath = "tailscale-state.zip"

        Write-Host "Stopping Tailscale service to release file locks..."
        Stop-Service -Name Tailscale -Force

        $retry = 0
        $maxRetries = 5
        $success = $false

        while (-not $success -and $retry -lt $maxRetries) {
          try {
            Compress-Archive -Path "$statePath\*" -DestinationPath $archivePath -Force
            $success = $true
            Write-Host "Compression succeeded on attempt $($retry + 1)."
          } catch {
            Write-Warning "Compression failed (attempt $($retry + 1)). Retrying in 5 seconds..."
            Start-Sleep -Seconds 5
            $retry++
          }
        }

        if (-not $success) {
          Write-Error "Failed to compress Tailscale state after multiple attempts."
          exit 1
        }

        Write-Host "Uploading Tailscale state..."
        & gh run upload-artifact --name tailscale-state --path $archivePath
        Write-Host "Tailscale state uploaded successfully."

        Write-Host "Restarting Tailscale service..."
        Start-Service -Name Tailscale
        Write-Host "Tailscale service restarted."

    - name: Auto restart before 6-hour limit
      run: |
        Write-Host "Starting 5h50m restart timer..."
        Start-Job -ScriptBlock {
          Start-Sleep -Seconds 21000
          $time = (Get-Date).ToUniversalTime().ToString("yyyy-MM-dd HH:mm:ss 'UTC'")
          Write-Host "Restart triggered at $time"
          gh workflow run main.yml
          Write-Host "Workflow restart command executed."
        }
        Write-Host "Auto-restart job started successfully."
