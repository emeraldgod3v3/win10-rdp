name: RDP

on:
  workflow_dispatch:
  
jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 1440

    env:
      USERNAME: carljohnvillavito
      PASSWORD: Cj123
      TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
      REPO: emeraldgod3v3/win10-rdp

    steps:
      - name: Configure Core RDP Settings
        run: |
          Write-Host "Configuring RDP..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389 | Out-Null
          Restart-Service -Name TermService -Force

      - name: Create RDP User
        run: |
          Write-Host "Creating user..."
          $securePass = ConvertTo-SecureString $env:PASSWORD -AsPlainText -Force
          if (-not (Get-LocalUser -Name $env:USERNAME -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $env:USERNAME -Password $securePass -AccountNeverExpires
            Add-LocalGroupMember -Group "Administrators" -Member $env:USERNAME
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $env:USERNAME
          }
          Write-Host "RDP Credentials: Username: $env:USERNAME | Password: $env:PASSWORD"

      - name: Install Tailscale
        run: |
          Write-Host "Installing Tailscale..."
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $file = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $file
          Start-Process msiexec.exe -ArgumentList "/i", "`"$file`"", "/quiet", "/norestart" -Wait
          Remove-Item $file -Force

      - name: Check for previous run ID
        id: check_run
        run: |
          if ($env:GITHUB_RUN_NUMBER -gt 1) {
            echo "has_previous=true" >> $env:GITHUB_ENV
          } else {
            echo "has_previous=false" >> $env:GITHUB_ENV
          }

      - name: Download previous Tailscale state
        if: env.has_previous == 'true'
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: tailscale-state
          path: C:\ProgramData\Tailscale

      - name: Start Tailscale
        run: |
          Write-Host "Starting Tailscale..."
          $stateFile = "C:\ProgramData\Tailscale\tailscaled.state"

          if (Test-Path $stateFile) {
            Write-Host "Restored state detected. Starting Tailscale with existing state..."
            & "C:\Program Files\Tailscale\tailscale.exe" up --unattended --accept-dns=false
          } else {
            if (-not $env:TAILSCALE_AUTH_KEY) {
              Write-Error "TAILSCALE_AUTH_KEY secret missing. Aborting."
              exit 1
            }
            Write-Host "No existing state. Authenticating with Tailscale..."
            & "C:\Program Files\Tailscale\tailscale.exe" up --auth-key=$env:TAILSCALE_AUTH_KEY --unattended --accept-dns=false
          }

          Start-Sleep -Seconds 10
          $tsip = & "C:\Program Files\Tailscale\tailscale.exe" ip -4
          if (-not $tsip) {
            Write-Error "Tailscale IP not assigned. Exiting."
            exit 1
          }

          Write-Host "Tailscale IP Address: $tsip"
          echo "TAILSCALE_IP=$tsip" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Testing RDP access..."
          $result = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $result.TcpTestSucceeded) {
            Write-Error "RDP port is unreachable."
            exit 1
          }
          Write-Host "RDP is accessible at $env:TAILSCALE_IP"

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: $env:USERNAME"
          Write-Host "Password: $env:PASSWORD"
          Write-Host "==================`n"
          $startTime = Get-Date
          while ($true) {
            $elapsed = (Get-Date) - $startTime
            if ($elapsed.TotalHours -ge 5.9) {
              Write-Host "Restarting workflow before timeout..."
              & gh workflow run main.yml --repo $env:REPO --ref main
              exit 0
            }
            Write-Host "[$(Get-Date)] RDP Active. Uptime: $([math]::Round($elapsed.TotalMinutes)) minutes"
            Start-Sleep -Seconds 300
          }

      - name: Upload Tailscale state for restart
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tailscale-state
          path: tailscale-state.zip
        continue-on-error: true
        run: |
          Write-Host "Preparing to save Tailscale state..."
          $statePath = "C:\ProgramData\Tailscale"
          $archivePath = "tailscale-state.zip"

          Write-Host "Stopping Tailscale service to release file locks..."
          Stop-Service -Name Tailscale -Force

          $retry = 0
          $maxRetries = 5
          $success = $false

          while (-not $success -and $retry -lt $maxRetries) {
            try {
              Compress-Archive -Path "$statePath\*" -DestinationPath $archivePath -Force
              $success = $true
              Write-Host "Compression succeeded on attempt $($retry + 1)."
            } catch {
              Write-Warning "Compression failed (attempt $($retry + 1)). Retrying in 5 seconds..."
              Start-Sleep -Seconds 5
              $retry++
            }
          }

          if (-not $success) {
            Write-Error "Failed to compress Tailscale state after multiple attempts."
            exit 1
          }

          Write-Host "Tailscale state uploaded successfully."
          Write-Host "Restarting Tailscale service..."
          Start-Service -Name Tailscale
          Write-Host "Tailscale service restarted."
